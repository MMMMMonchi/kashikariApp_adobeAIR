////////////////////////////////////////////////////////////////////////やりとりのページを生成するメソッド//////////////////////////////////////////////////////////////////////package ui.page.communicationPage {	import flash.display.Sprite;	import common.CreateTestSprite;	import flash.events.MouseEvent;	import flash.text.TextField;	import common.CreateTextField;	import ui.footer.Footer;	import ui.header.Header;	import flash.events.Event;	public class CommunicationPageBase extends Sprite{		private var _footer:Footer;		private var _header:Header;		public function CommunicationPageBase() {						_footer = _global.footer as Footer;			_header = _global.header as Header;						_global.communicationPage = this;			makeContents();		}						//////////////////////////////////////////////////////////////////////		//ページ上のコンテンツを生成するメソッド		//////////////////////////////////////////////////////////////////////				private const _scrollContainerWidth:int = MainContainer.IPHONE_WIDTH - 20 * 2;		private var _scrollContainerHeight:int = 0;		//private const _scrollContainerStartYPostion:int = 100 + 20;		private const _contentsStartYPostion:int = 20;		private var _currentItemEndPositionY:int = 0;		private function makeContents():void {						//暫定背景画像を生成する			_scrollContainer = new Sprite();			_scrollContainer.graphics.beginFill(0x00ff00, 0.5);			_scrollContainer.graphics.drawRoundRect(0, 0, _scrollContainerWidth, _scrollContainerWidth, 100);			_scrollContainer.graphics.endFill();			_scrollContainer.x = MainContainer.IPHONE_WIDTH / 2 - _scrollContainer.width / 2;			_scrollContainer.y = _scrollContainerStartPositionY;			addChild(_scrollContainer);						//デフォルトのアイテムを生成するメソッド			initItem();		}				//////////////////////////////////////////////////////////////////////		//ページ生成と同時に生成するやりとり		//////////////////////////////////////////////////////////////////////				private const _itemMargin:int = 2;		private var _itemIndex:int = 0;		private function initItem():void {						//一番最初に表示するアイテムを生成する。			for (var i:int = 0; i < _contentsNum; i++) {								var testCommuButton:Sprite = CreateTestSprite.getTestRectangle(0xff00ff, 0.5, MainContainer.IPHONE_WIDTH - 100, 100);				testCommuButton.x = _scrollContainer.width / 2 - testCommuButton.width / 2;				testCommuButton.y = _contentsStartYPostion + i * (testCommuButton.height + _itemMargin);				_scrollContainer.addChild(testCommuButton);								var testText:TextField = CreateTextField.getNormalTextField(_itemIndex.toString() + "番目のやりとりだよ", 30, 0xffffff);				testCommuButton.addChild(testText);				testCommuButton.addEventListener(MouseEvent.CLICK, addItem);								//スクロールコンテナの長さを更新する				_scrollContainerHeight = testCommuButton.y + _scrollContainerStartPositionY + 20;								//最後のコンテンツのＹ座標を取得しておく				_currentItemEndPositionY = _contentsStartYPostion + i * (testCommuButton.height + _itemMargin);								_itemIndex++;			}						//背景の図形を再描画する			drawRoundRectagle();						//スクロールの最大量を設定する			_maxScrollY = _scrollContainer.height + 20 * 2 - (MainContainer.IPHONE_HEIGHT - _header.height - _footer.height);						//スクロール関係のイベントを設定する			_scrollContainer.addEventListener(MouseEvent.MOUSE_DOWN, onMDownScrollContainer);			_scrollContainer.addEventListener(MouseEvent.MOUSE_MOVE, onMMoveScrollContainer);			_scrollContainer.addEventListener(MouseEvent.MOUSE_UP, onMUpScrollContainer);		}				//////////////////////////////////////////////////////////////////////		//背景の丸角四角形をコンテンツの数にあわせて再描画するメソッド		//////////////////////////////////////////////////////////////////////				private function drawRoundRectagle():void {						//描画されている角丸四角形を一度クリアする			_scrollContainer.graphics.clear();			_scrollContainer.graphics.beginFill(0x00ff00, 0.5);			_scrollContainer.graphics.drawRoundRect(0, 0, _scrollContainerWidth, _scrollContainerHeight, 100);			_scrollContainer.graphics.endFill();			_scrollContainer.x = MainContainer.IPHONE_WIDTH / 2 - _scrollContainer.width / 2;						//このコメントアウトを外すとスクロールコンテナの先頭に戻る			//_scrollContainer.y = _scrollContainerStartPositionY;		}				//////////////////////////////////////////////////////////////////////		//アイテムを追加する再にしようするメソッド		//////////////////////////////////////////////////////////////////////				private var _addItemNum:int = 2;		private function addItem(e:MouseEvent):void {						//追加のアイテムを生成する			for (var i:int = 0; i < _addItemNum; i++) {				var testCommuButton:Sprite = CreateTestSprite.getTestRectangle(0xff00ff, 0.5, MainContainer.IPHONE_WIDTH - 100, 100);				testCommuButton.x = _scrollContainer.width / 2 - testCommuButton.width / 2;				testCommuButton.y = _currentItemEndPositionY + (i + 1) * (testCommuButton.height + _itemMargin);				_scrollContainer.addChild(testCommuButton);								var testText:TextField = CreateTextField.getNormalTextField(_itemIndex.toString() + "番目のやりとりだよ", 30, 0xffffff);				testCommuButton.addChild(testText);				testCommuButton.addEventListener(MouseEvent.CLICK, addItem);								//スクロールコンテナの長さを更新する				_scrollContainerHeight = testCommuButton.y + _scrollContainerStartPositionY + 20;				//最後のコンテンツのＹ座標を取得しておく				if (i == _addItemNum - 1) {						_currentItemEndPositionY = _currentItemEndPositionY + (i + 1) * (testCommuButton.height + _itemMargin);				}								_itemIndex++;			}						//背景の図形を再描画する			drawRoundRectagle();			//スクロールの最大幅を更新する			_maxScrollY = _scrollContainer.height + 20 * 2 - (MainContainer.IPHONE_HEIGHT - _header.height - _footer.height);		}				private var _moveValue:int = 0;		private var _prePositionY:int = 0;		private var _mouseDownFlg:Boolean = false;		private var _contentsNum:int = 10;		private var _scrollContainer:Sprite;				//////////////////////////////////////////////////////////////////////		//スクロールコンテナをタッチした際のメソッド		//////////////////////////////////////////////////////////////////////				private function onMDownScrollContainer(e:MouseEvent):void {						//移動量は０			_moveValue = 0;						//最初に触った場所のｙ			_prePositionY = e.stageY;						//スクロールアニメーションのイベントを設定			addEventListener(Event.ENTER_FRAME, onEFrameScroll);						//現在タッチしているかどうかのフラグ			_mouseDownFlg = true;		}				//////////////////////////////////////////////////////////////////////		//スクロールコンテナのタッチを離した際のメソッド		//////////////////////////////////////////////////////////////////////				private function onMUpScrollContainer(e:MouseEvent):void {			//現在タッチしているかどうかのフラグ			_mouseDownFlg = false;		}				//////////////////////////////////////////////////////////////////////		//スクロールコンテナ内を動かした際のメソッド		//////////////////////////////////////////////////////////////////////				private function onMMoveScrollContainer(e:MouseEvent):void {			//現在ボタンを押しっぱなしならば			if (e.buttonDown) {				//移動量に移動した分(現在位置と以前の位置の差分)を加える				_moveValue += (e.stageY - _prePositionY) * 2.2;				//移動量の差分を出すのに使う位置を再取得				_prePositionY = e.stageY;			}		}				//////////////////////////////////////////////////////////////////////		//スクロールコンテナを動かすメソッド		//////////////////////////////////////////////////////////////////////				private const SCROLL_VALUE:int = 5;		private var _maxScrollY:int;		private var _itemNum:int = 10;		private var _scrollContainerStartPositionY:int = 100 + 20;		private var _itemList:Array;		private var _leftItemPositionX:int;		private function onEFrameScroll(e:Event):void {						_moveValue += (0 - _moveValue) / 6;						_scrollContainer.y += _moveValue / SCROLL_VALUE ;						//Y位置が初期位置より下に来ないように設定			if (_scrollContainer.y > _scrollContainerStartPositionY) {				_scrollContainer.y = _scrollContainerStartPositionY;			}						//Ｙ位置がスクロール最大幅以上にスクロールしないように設定			else if (_scrollContainer.y < _scrollContainerStartPositionY - _maxScrollY) {				_scrollContainer.y = _scrollContainerStartPositionY- _maxScrollY;			}						//画面にタッチしておらず、なおかつ移動量が0に近い場合には、エンターフレームイベントを停止させる。			if (_mouseDownFlg == false && Math.abs(_moveValue) < 1.5) {				removeEventListener(Event.ENTER_FRAME, onEFrameScroll);			}			_scrollContainer.scaleX		}			}}